#!/usr/bin/env python
#coding: utf-8

__author__ = 'Toshihiro Kamiya <kamiya@mbj.nifty.com>'
__status__ = 'experimental'

import sys

from enum_generator import EnumGenerator
from _utilities import readline_iter, sort_uniq

def read_ngram_iter(ngram_file):
    cur_opes, cur_locs, cur_deps = [], [], []
    for L in readline_iter(ngram_file):
        if L.startswith('#'):
            yield None, L, None
        elif L == '':  # separator of ngram
            if cur_opes:
                oseq = tuple(cur_opes)
                ls = tuple(cur_locs)
                ds = tuple(cur_deps)
                yield oseq, ls, ds
                cur_opes, cur_locs, cur_deps = [], [], []
        else:
            ope, loc, dep = L.split('\t')
            cur_opes.append(ope)
            cur_locs.append(loc)
            cur_deps.append(int(dep))

def gen_argpsr():
    from argparse import ArgumentParser
    from _version_data import VERSION
    psr = ArgumentParser(description='Generate n-grams of method calls')
    psr.add_argument('ngram_file', action='store',
            help="n-gram file (generated by gen_ngram.py). specify '-' to read from stdin")
#    psr.add_argument('--bag-comparison', action='store_true')
    psr.add_argument('--debug-keep-fanin-fanout-clone', action='store_true')
    psr.add_argument('--version', action='version', version='%(prog)s ' + VERSION)
    return psr

def main(argv):
    psr = gen_argpsr()
    args = psr.parse_args(argv[1:])

#    bag_comparison = args.bag_comparison
    remove_fanin_fanout_clone = not args.debug_keep_fanin_fanout_clone

    ope2locs = {}  # oiseq -> [liseq]
    ope_enum = EnumGenerator()
    loc_enum = EnumGenerator()
    oiseq_startingli2dep = {}

    comment_lines = []

    flat_oiseqs = set()
    for oseq, lseq, dseq in read_ngram_iter(args.ngram_file):
        if oseq is None:
            comment_lines.append(lseq)
        else:
#            if bag_comparison:
#                oseq = tuple(sorted(oseq))
            oiseq = tuple(map(ope_enum.to_int, oseq))
            keep_ngram = True
            if max(dseq) == 0:
                if oiseq in flat_oiseqs:
                    keep_ngram = False
                else:
                    flat_oiseqs.add(oiseq)
            if keep_ngram:
                liseq = tuple(map(loc_enum.to_int, lseq))
                ope2locs.setdefault(oiseq, []).append(liseq)
                startingli = liseq[0]
                oiseq_startingli = (oiseq, startingli)
                d = oiseq_startingli2dep.get(oiseq_startingli, sys.maxint)
                oiseq_startingli2dep[oiseq_startingli] = min(d, max(dseq))

    for L in comment_lines:
        sys.stdout.write('%s\n' % L.encode('utf-8'))
#    if bag_comparison:
#        sys.stdout.write('# --bag-comparison\n')
    sys.stdout.write('\n')

    for oiseq, liseqs in sorted(ope2locs.iteritems()):
        if remove_fanin_fanout_clone and \
                any(len(set(lis)) == 1 for lis in zip(*liseqs)): # n-grams are sharing the same byte-code index at any index of their trace?
            continue

        sys.stdout.write('ope:\n')
        for opei in oiseq:
            ope = ope_enum.to_str(opei)
            sys.stdout.write('  %s\n' % ope)

        sys.stdout.write('loc:\n')
        startingliseq = sort_uniq([liseq[0] for liseq in liseqs])
        for loci in startingliseq:
            depth = oiseq_startingli2dep.get((oiseq, loci))
            assert depth is not None
            loc = loc_enum.to_str(loci)
            sys.stdout.write('  %s >%d\n' % (loc, depth))
        sys.stdout.write('\n')

if __name__ == '__main__':
    main(sys.argv)

